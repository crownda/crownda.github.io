<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>财财</title>
    <link href="/2023/11/14/%E8%B4%A2%E8%B4%A2/"/>
    <url>/2023/11/14/%E8%B4%A2%E8%B4%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>与不知处而来，归远乡而去。</p><p>记你的离去：2023&#x2F;11&#x2F;14&#x2F;12:56</p><p>悔昨日那般相对，谢临别如此望我。</p><p>离去的感觉便是总觉得每日重复的生活中少了点什么，以前总烦你，现在却…</p><p>看着你那般样子却还坚持回来看我，我只觉你不对却不知道这是最后一次相见。再见，财财</p>]]></content>
    
    
    
    <tags>
      
      <tag>memory</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis初识</title>
    <link href="/2023/11/04/Redis%E5%88%9D%E8%AF%86/"/>
    <url>/2023/11/04/Redis%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h4><h5 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h5><ul><li><strong>Remote Dictionary Server</strong>（远程数据服务） </li><li><strong>C语言编写</strong></li><li><strong>一种支持key-value等多种数据结构的存储系统</strong></li><li>**内存高速缓存数据库 **</li></ul><h5 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h5><p>良好的特性</p><ul><li><strong>读写性能优异</strong><ul><li>Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li></ul></li><li><strong>数据类型丰富</strong><ul><li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li></ul></li><li><strong>原子性</strong><ul><li>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li></ul></li><li><strong>丰富的特性</strong><ul><li>Redis支持 publish&#x2F;subscribe, 通知, key 过期等特性。</li></ul></li><li><strong>持久化</strong><ul><li>Redis支持RDB, AOF等持久化方式</li></ul></li><li><strong>发布订阅</strong><ul><li>Redis支持发布&#x2F;订阅模式</li></ul></li><li><strong>分布式</strong><ul><li>Redis Cluster</li></ul></li></ul><h5 id="干什么"><a href="#干什么" class="headerlink" title="干什么"></a>干什么</h5><p>常见应用场景如下</p><ul><li><p><strong>热点数据缓存</strong></p><p>读写性能优异适合缓存</p><ul><li><p>数据实时性要求不高时</p><p>读取前，先去读Redis，如果没有数据，读取数据库，将数据拉入Redis</p><p>不足：缓存击穿问题（极端：请求一个不存在的数据，Redis相当于不存在），实时性较差（找你要你没有说等你找到）</p></li><li><p>字典表等数据量不大的数据</p><p>插入数据时，同时写入Redis</p><p>不足：开发时不方便统一处理</p></li></ul></li><li><p><strong>限时业务</strong></p><p>使用expire命令设置一个键的生存时间，到时间后Redis会删除它 。通过查询该数据是否存在判断当前业务是否过时</p></li><li><p><strong>计数器相关问题</strong></p><p>incrby命令可以实现原子性的递增 </p></li><li><p><strong>分布式锁</strong></p><p>Redis的setnx命令进行，setnx：”set if not exists”就是如果不存在则成功设置缓存同时返回1，否则返回0**</p></li><li><p><strong>延时操作</strong></p><p>由于Redis自2.8.0之后版本提供Keyspace Notifications功能，允许客户订阅Pub&#x2F;Sub频道，以便以某种方式接收影响Redis数据集的事件。 所以我们对于上面的需求就可以用以下解决方案，我们在订单生产时，设置一个key，同时设置10分钟后过期， 我们在后台实现一个监听器，监听key的实效，监听到key失效时将后续逻辑加上。</p><p>当然我们也可以利用rabbitmq、activemq等消息中间件的延迟队列服务实现该需求。</p></li><li><p><strong>排行榜相关问题</strong></p><p>关系型数据库在排行榜方面查询速度普遍偏慢，所以可以借助Redis的SortedSet进行热点数据的排序。</p><p>比如点赞排行榜，做一个SortedSet, 然后以用户的openid作为上面的username, 以用户的点赞数作为上面的score, 然后针对每个用户做一个hash, 通过zrangebyscore就可以按照点赞数获取排行榜，然后再根据username获取用户的hash信息，这个当时在实际运用中性能体验也蛮不错的。简单来说就是把排序的实现放到Redis中实现。</p></li><li><p><strong>点赞、好友等相互关系的存储</strong></p><p>Redis 利用集合的一些命令，比如求交集、并集、差集等。</p><p>在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。</p></li><li><p><strong>简单队列</strong></p><p>由于Redis有list push和list pop这样的命令，所以能够很方便的执行队列操作 。</p></li></ul><hr><h5 id="Redis基础数据类型"><a href="#Redis基础数据类型" class="headerlink" title="Redis基础数据类型"></a>Redis基础数据类型</h5><p>​首先Redis是以key-value形式存储数据，而key一致为字符串。所以我们讨论其数据结构时一般是指其存储值的数据类型。</p><p>​Redis常用5种数据类型：String，List，Set，Zset，Hash。注意不同的数据类型有不同的操作命令。</p><ul><li><p><strong>String</strong></p><blockquote><p>String是二进制安全的，即Redis的String类型可以包含任何数据。如数字，字符串，JPG图片或者序列化的对象。</p></blockquote><p>其常用命令：</p><table><thead><tr><th>命令</th><th>作用</th><th>范例</th></tr></thead><tbody><tr><td>set</td><td>添加给定键及其对应给定值</td><td>set <key> <value></td></tr><tr><td>del</td><td>删除存储在给定键的值</td><td>del <key></td></tr><tr><td>incr</td><td>将存储在给定键的值加1，要求存储的值可以表示为整数</td><td>incr <key></td></tr><tr><td>decr</td><td>将存储在给定键的值减1，要求存储的值可以表示为整数</td><td>decr <key></td></tr><tr><td>incrby</td><td>将存储在给定键的值加指定值，要求存储的值可以表示为整数</td><td>incrby <key></td></tr><tr><td>decrby</td><td>将存储在给定键的值减指定值，要求存储的值可以表示为整数</td><td>decrby <key></td></tr><tr><td>get</td><td>获取存储在给定键的值</td><td>get <key></td></tr></tbody></table><p>适用场景：</p><ul><li>缓存：把常用信息，字符串，图片或者视频等信息放入Redis中，其作为缓存层，MySQL作为持久化层，降低MySQL的读写压力。</li><li>session：常见方案Spring Session+Redis实现session共享。</li><li>计数器：Redis是单线程模型，一个命令执行完才会执行下一个，同时数据转移到另一个数据源。</li></ul></li><li><p><strong>List列表</strong></p><blockquote><p>Redis用双端链表实现的List，列表包含元素可以重复。</p></blockquote><p>其常用命令：</p><table><thead><tr><th>命令</th><th>作用</th><th>范例</th></tr></thead><tbody><tr><td>rpush</td><td>将给定值推入到列表右端</td><td>rpush <key> <value></td></tr><tr><td>lpush</td><td>将给定值推入到列表左端</td><td>lpush <key> <value></td></tr><tr><td>rpop</td><td>从列表的右端弹出一个值，并返回被弹出的值</td><td>rpop <key></td></tr><tr><td>lpop</td><td>从列表的左端弹出一个值，并返回被弹出的值</td><td>lpop <key></td></tr><tr><td>lrange</td><td>获取列表在给定范围上的所有值</td><td>lrange lrange <key> <index>-<index></td></tr><tr><td>lindex</td><td>通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</td><td>lindex <key> <index></td></tr></tbody></table><p>适用场景：</p><ul><li><strong>微博TimeLine</strong>: 有人发布微博，用lpush加入时间轴，展示新的列表信息。</li><li><strong>消息队列</strong></li></ul></li><li><p><strong>Set集合</strong></p></li></ul><blockquote><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，集合中不能出现重复的数据。其通过哈希表实现的，故添加，删除，查找的复杂度都是O（1）。 </p></blockquote><p>​其常用命令：</p><table><thead><tr><th>命令</th><th>作用</th><th>范例</th></tr></thead><tbody><tr><td>sadd</td><td>向集合中添加任意成员</td><td>sadd <key> <value></td></tr><tr><td>scard</td><td>获取集合的成员数</td><td>scard <key></td></tr><tr><td>smembers</td><td>获取集合的所有成员</td><td>smembers <key></td></tr><tr><td>sismember</td><td>判断member元素是否为该集合的成员</td><td>sismember <key> <value></td></tr></tbody></table><p>​适用场景：</p><ul><li><ul><li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li><strong>点赞，或点踩，收藏等</strong>，可以放到set中实现。</li></ul></li><li><strong>Hash散列</strong></li></ul><blockquote><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。键无序且唯一。 </p></blockquote><p>​其常用命令：</p><table><thead><tr><th>命令</th><th>作用</th><th>范例</th></tr></thead><tbody><tr><td>hset</td><td>添加键值对</td><td>hset <hash-key> <sub-key> <value></td></tr><tr><td>hget</td><td>获取指定散列键的值</td><td>hget <hash-key> <sub-key></td></tr><tr><td>hgetall</td><td>获取散列中包含的所有键值对</td><td>hgetall <hash-key></td></tr><tr><td>hdel</td><td>如果给定键存在散列中，删除该键值对</td><td>hdel <hash-key> <sub-key></td></tr></tbody></table><p>​适用场景：</p><ul><li><ul><li><strong>缓存</strong>： 能直观，相比string更节省空间，的维护缓存信息，如用户信息，视频信息等。</li></ul></li><li><p><strong>Zset有序集合</strong></p><blockquote><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。 </p></blockquote><pre><code class="hljs">  其常用命令:</code></pre></li></ul><table><thead><tr><th>命令</th><th>作用</th><th>范例</th></tr></thead><tbody><tr><td>zadd</td><td>将一个带有给定分值的成员添加到有序集合里</td><td>zadd <zset-key> <score> <member></td></tr><tr><td>zrange</td><td>返回有序集合里指定区间的成员</td><td>ZRANGE <zset-key> <start> <stop> [WITHSCORES]</td></tr><tr><td>zrem</td><td>如果给定元素成员存在该有序集合，删除该元素</td><td>zrem <zset-kry> <member></td></tr></tbody></table><p>​适用场景：</p><ul><li><ul><li><strong>排行榜</strong>：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ul></li></ul><hr><p>#####Redis的3种特殊类型</p><p>​特殊场景下的更适用选择</p><ul><li><p><strong>HyperLogLogs（ 基数统计）</strong> </p><p>统计集合中的不重复成员数目。通俗来讲我们可以把基数统计放到代码里实现，即先读取Redis里的数据然后通过Java完成，而现在Redis自己就能实现这个功能了，虽然这个功能存在误差0.81%，但是就很适合允许一定容错的业务场景。</p></li><li><p><strong>Bitmap（位存储）</strong></p><p>操作二进制位来进行记录，只有0和1两个状态。其和Java的boolean功能相似，可以用其存储。</p></li><li><p><strong>geospatial（地理位置）</strong></p><p>用于存储地理位置的信息（经纬度），并配有常用数据操作。底层使用Redis的Zset实现。</p><p>这里给出一个如果开发地图的相关业务需要的网站<a href="http://www.jsons.cn/lngcode">http://www.jsons.cn/lngcode</a></p></li></ul><hr><p>#####Redis新增数据类型-stream</p><blockquote><p>Redis5.0 中还增加了一个数据类型Stream，它借鉴了Kafka的设计，是一个新的强大的支持多播的可持久化的消息队列。 </p></blockquote><p>基于Redis实现消息队列的几种方法：</p><ul><li><p><strong>PUB&#x2F;SUB模式，订阅&#x2F;发布模式</strong></p><p>简单来说就是发布者（PUB）将信息推送到频道（消息队列），订阅者通过订阅某个频道（消息队列）接收信息。</p><p>不足：<code>无法持久化</code>  <code>不可靠，信息丢失</code></p></li><li><p>基于<strong>List LPUSH+BRPOP</strong> 或者 <strong>基于Sorted-Set</strong>的实现 </p><p>支持持久化</p><p>不足：<code>不支持多播，分组消费</code></p></li><li><p><strong>stream</strong></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发常用工具库</title>
    <link href="/2023/11/04/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    <url>/2023/11/04/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="Apache-Common包"><a href="#Apache-Common包" class="headerlink" title="Apache Common包"></a>Apache Common包</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>简单来说别人造好的轮子，减少重复劳动的。<a href="http://commons.apache.org/">Apache Common</a>是对JDK的拓展，是一个开源的Java工具集。</p><h5 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h5><ul><li><p>Commons BeanUtils</p><p>初见君是在黑马的苍穹外卖里，用于拷贝属性值。是其比较常用的功能：Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上传博客文章出错解决方案</title>
    <link href="/2023/11/03/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/11/03/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><ul><li><p>问题描述</p><p>使用<code>hexo d</code> 部署文章时报错，上传文章失败。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">On branch master<br>nothing to commit, working tree clean<br>ssh: connect to host github.com port 22: Connection refused<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (D:\blog\myblog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:527:28)<br>    at ChildProcess.cp.emit (D:\blog\myblog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)<br></code></pre></td></tr></table></figure></li><li><p>问题解析</p><p>根据信息显示，通过SSH连接Git远程仓库失败，其拒绝连接。由于GitHub在国外，其访问不稳定导致的连接失败。</p></li><li><p>解决方案</p><ul><li><p>加速器</p><p>下载并使用微软商店的Steam++（目前使用方法）</p></li><li><p>迁移数据</p><p>将GitHub换成gitee</p></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Git的第一天</title>
    <link href="/2023/11/01/%E5%AD%A6%E4%B9%A0Git%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2023/11/01/%E5%AD%A6%E4%B9%A0Git%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="Git-分布式版本控制工具"><a href="#Git-分布式版本控制工具" class="headerlink" title="Git 分布式版本控制工具"></a>Git 分布式版本控制工具</h3><p>####为什么需要版本控制工具？</p><p>一个项目的编写往往需要多人长期合作完成，在此期间避免不了各种问题。比如写完一个模块要上线了结果电脑死机，硬盘完全损毁；某天你喝醉了心血来潮写了一堆不合格的代码写入了项目中，你还忘记那些是当时写入的等各种情况。这时候就需要一个版本控制工具解决类似场景问题。</p><h4 id="版本控制器的方式"><a href="#版本控制器的方式" class="headerlink" title="版本控制器的方式"></a>版本控制器的方式</h4><p><code>集中式版本控制工具</code> </p><p>版本库集中存放在中央服务器，团队中的每个成员都可以从服务器上下载代码，但必须联网（局域网或互联网）实现，个人修改后提交到中央版本库。常见的有<code>SVN</code>和<code>CVS</code></p><p><code>分布式版本控制工具</code></p><p>分布式版本控制系统没有“中央服务器”，而是把版本库存放在每个人的电脑上，所以工作时不需要联网，多人协作只需要把各自的修改互相推送就可以看到别人的修改了。常见的<code>git</code></p><p><code>简结</code> 集中式版本控制工具的应用类似每个人从厂里（中央服务器）拿回（下载）原料（代码），加工好（修改完）后提交给厂里。缺点是如果厂（中央的版本库）没了就啥都没了，也就是备份问题未完全解决。分布式版本控制工具则是鸡蛋不放一个篮子的道理。类比一副电子画，每个人的电脑都有，添加一笔后和其他人交流。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>Git不需要有中央服务器，设置中央服务器的目的是方便大家交换修改。把它当做一个只交流修改本身不工作的时刻在线的同事就行。Git是Linux的缔造者之一为了管理Linux内核开发而开发的开源版本控制软件。</p><h4 id="Git常见指令"><a href="#Git常见指令" class="headerlink" title="Git常见指令"></a>Git常见指令</h4><p><code>git init</code> 初始化当前目录为一个Git本地仓库，在当前目录下会生成一个<code>.git</code> 的文件夹，默认生成master分支</p><p><code>git add 文件名 </code> (工作区  &#x3D;&#x3D;&#x3D;&gt;   暂存区，文件名用.代替的话就是工作区所有修改文件&#x3D;&#x3D;&#x3D;&gt;暂存区)</p><p><code>git commit</code> (暂存区  &#x3D;&#x3D;&#x3D;&gt;   本地仓库)    <code>git commit  -m  &quot;提交内容描述&quot;</code> (暂存区  &#x3D;&#x3D;&#x3D;&gt;  本地仓库，在Git日志里为本次操作命名)</p><p><code>git status</code> 查看修改的状态（在工作区或暂存区的）</p><p><code>git log</code> 查看提交日志，日志里每个操作对对应一个哈希值，因为git的智能处理我们不需要用完整的哈希值去完成其他操作</p><p><code>git reset</code> 暂存区的修改恢复到工作区</p><p><code>git reset &lt;location&gt;</code> 当前分支记录回退几个提交记录来撤销改动。</p><p><code>git revert</code> 适合需要回退版本并提交给别人看，会提交撤销之前的提交的新提交，提交后新建一个节点，该节点和需要回退到的节点一样。</p><p><code>git checkout -b &lt;new-branch-name&gt;</code> 新建分支（branch）并切换到该分支，若去掉参数<code>-b</code> 就仅切换。实际切换的HEAD的指向，也可以切换到某次提交。配合^和~number使用更好</p><p><code>git branch -a</code> 查看当前本地和远程有那些分支，若去掉参数<code>-a</code> 就查看当前本地有那些分支。</p><p><code>git branch &lt;branch-name&gt; &lt;location&gt;</code> 强制修改分支位置</p><p><code>git branch &lt;new-branch-name&gt;</code> 创建新分支</p><p><code> git merge &lt;branch-name&gt;</code> 将该分支合并到master分支</p><p><code>git rebase &lt;branch-name&gt;</code> 将该分支以另一种方式合并到另一个分支</p><p><code>git rebase -i &lt;参数值&gt; </code> 打开交互式UI界面操作提交记录</p><p><code>git pull</code> 从远程仓库拉取最新的代码到本地的仓库并合并到当前分支</p><p><code>git fetch</code> 从远程仓库获取本地仓库中缺失的提交</p><p><code>git cherry-pick &lt;提交号&gt;</code> 将某个提交复制粘贴到当前位置下</p><p><code>git clone &lt;url&gt; &lt;file-name&gt;</code> 克隆（下载）一个地址为url的远程Git仓库到本地，将其存放在file-name文件夹里</p>]]></content>
    
    
    
    <tags>
      
      <tag>study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo如何编写文章</title>
    <link href="/2023/11/01/hexo%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <url>/2023/11/01/hexo%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="hexo介绍"><a href="#hexo介绍" class="headerlink" title="hexo介绍"></a>hexo介绍</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 </p><figure class="highlight plaintext"><figcaption><span><https://hexo.io/zh-cn/docs/></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 技术文档```"><br>#### 编写文章<br><br>首先在博客项目所在目录打开```Git Bash``` ，输入<br><br>```shell<br>$ hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>该命令会在<code>source</code> 文件夹或其子文件夹内生成一个md文件，而我们想写的文章内容就写在md文件内。</p><p>相关说明：</p><p><code>layout</code> 布局</p><p>hexo有三种默认布局：post，page，draft</p><p>不同布局的md文件会存储在不同的路径下</p><table><thead><tr><th>layout（布局）</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source&#x2F;_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source&#x2F;_draft</td></tr></tbody></table><p>其中post为默认布局，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。 </p><p><code>title</code> 文件名称</p><p>生成的md文件默认使用title作为文件名，可以通过修改 <code>_config.yml</code> 中的 <code>new_post_name </code> 参数来指定新建post布局文件的命名方法。 </p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><p><code>layout</code> 草稿</p><p><code>Scaffold</code> 模板</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2023/11/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/11/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>经过一天的报错纠错，终于在今天完成了第一篇博客的编写，不容易啊QAQ</p>]]></content>
    
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
